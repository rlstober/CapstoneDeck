sqrt(19.999)
help(lm)
install.packages("devtools")
?step
library("RODBC", lib.loc="C:/Users/bstober/Documents/R/win-library/3.1")
dbc<-odbcDriverConnect('driver={SQL Server};server=cam-sqlvirtual.jenzabar.net;database=jii_warehouse;trusted_connection=true')
?RODBC
RShowDoc("RODBC", package="RODBC").)
RShowDoc("RODBC", package="RODBC")
sqlTables(dbc)
sqlTables(dbc, tableType = "TABLE", schema = "dbo")
res <- sqlFetch(ch, "StudentTermFact")
ch<-dbc
res <- sqlFetch(ch, "StudentTermFact")
dim(res)
summary(res)
dimnames(res)
str(res)
is.numeric(res{,3]})
is.numeric(res[],3])
is.numeric(res[,3])
summary(res)
is.numeric(res[,13])
is.numeric(res[])
is.numeric(res[,])
is.numeric(res[,1:26])
is.numeric(res[,1:8])
is.numeric(res[,3:8])
is.numeric(res[,3])
is.numeric(res[,4])
is.numeric(res[,3:4])
is.numeric(res[,c(3,4)])
?is.numeric
is.numeric(res[,3])&is.numeric(res[,4])
class(res[,3])
str(res)
summary(res)
RShowDoc("RODBC", package="RODBC")
boxplot(res$TERM_GPS)
boxplot(res$TERM_GPA)
x<-res$TERM_GPA, na.remove = TRUE
x<-subset(res[,res$TERM_GPA] na.remove = TRUE)
x<-subset(res[,res$TERM_GPA] ,na.remove = TRUE)
x<-subset(res$TERM_GPA ,na.remove = TRUE)
x<-subset(res$TERM_GPA ,na.rm = TRUE)
x<-res$TERM_GPA ,na.rm = TRUE
head$TERM_GPA
head(res$TERM_GPA)
names(res)
head(res[20])
head(res[res$TERM_GPA])
head(res[res$TERM_GPA],)
head(res[,res$TERM_GPA])
res[,res$TERM_GPA]
res$TERM_GPA
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~0+x)
lm(y~x)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent, galton)
abline(regline, lwd=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
fit<-lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varchild<-var(children)
varchild<-var(galton$children)
varchild<-var(galton$child)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-ols.slope+ols.ic
varEst<-var(est(ols.slope,ls.ic)
)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild, varRes+varEst)
efit<-lm(accel, mag=dist, attenu)
efit<-lm(accl, mag=dist, attenu)
str(attenu)
efit<-lm(accel, mag+dist, attenu)
efit<-lm(accel~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals~attenu$mag)
?cov
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor, gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(child~parent, galton)
sum(fit$residuals^2)/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
stot<-(galton$child-mu)
stot<-sum((galton$child-mu)^2)
sTot<-sum((galton$child-mu)^2)
sres<-sum((galton$child-mu)^2)R
sRes<-sum((galton$child-mu)^2)R
sRes<-sum((galton$child-mu)^2))
sRes<-sum((galton$child-mu)^2)
sRes<-deviance(fit)
1-sRes/stot
1-sRes/sTot
summary(fit)$r.squared
(cor(child~parent, galton))^2
?cor
(cor(galton$child,galton$parent))^2
cor(galton$child,galton$parent)^2
ones<-rep(1,nrow(galton))
lm(child~ones+parent-1, galton)
lm(child~parent, galton)
lm(child~1,galton)
head(trees)
fit<-lm(Volume~Girth+Height+Constant-1, trees)
trees2<-eliminate("Girth", trees)
head9trees
head(trees)
head(trees2)
fit2<-lm(Volume~Height + Consyant-1, trees2)
fit2<-lm(Volume~Height + Constant-1, trees2)
lapply(list(fit,fit2),coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36
)
fit(lm(y~x)
)
fit<-lm(y~x)
fit
summary(fit)
load(mtcars)
data(mtcars)
mtcars
str(mtcars)
q3<-lm(mpg~wt)
q3<-lm(mpg~wt, data=mtcars)
summary(q3)
q3Coef<-summary(q3)$coefficeients
q3Coef
q3<-lm(mpg~wt, data=mtcars)
summary(q3
)
q3Coef<-summary(q3)$coefficients
q3Coef
q3Coef[1,1] + c(-1,1) * qt(.975, df=q3$df)* q3Coef[1,2]
?predict
q3$sigma
str(q3)
q3
summary(q3)
y<-mtcars$mpg
x<-mtcars$wt
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(y)-beta1*mean(x)
e<-y-beta0 - beat1*x
n<-length(y)
df<-n-2
sigma<-sqrt(sum(e^2)/df))
sigma<-sqrt(sum(e^2)/df)
e<-y-beta0 - beat1*x
e<-y-beta0 - beta1*x
sigma<-sqrt(sum(e^2)/df)
ssx<-sum(x-mean(x))^2
seBeta0<-(1/n+mean(x)^2/ssx)^.5*sigma
seBeta1<-sigma/sqrt(ssx)
tBeta0<-beta0/seBeta0;tBeta1<-beta1/seBeta1
pBeta0<-2*pt(abs(tBeta0),df=n-2,lower.tail=FALSE)
pBeta1<-2*pt(abs(tBeta1),df=n-2,lower.tail=FALSE)
coefTable<-rbind(c(beta0,seBeta0,tBeta0,pBeta0),c(beta1,seBeta1,tBeta1,pBeta1))
colnames(coefTable)<-c("Estimate","Std.Error","tvalue","P(>|t|)")
rownames(coefTable)<-c("(Intercept)","x")
coefTable
fit<-lm(y~x);
summary(fit)$coefficients
plot(x,y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
xVals<-seq(min(x),max(x),by=.01)
yVals<-beta0+beta1*xVals
se1<-sigma*sqrt(1/n+(xVals-mean(x))^2/ssx)
se2<-sigma*sqrt(1+1/n+(xVals-mean(x))^2/ssx)
lines(xVals,yVals+2*se1)
lines(xVals,yVals-2*se1)
lines(xVals,yVals+2*se2)
lines(xVals,yVals-2*se2)
se2
mean(x)
?predict
p<-predict(lm. x=mean(x))
p<-predict(fit, x=mean(x))
summary(p)
p
mean(p)
sd(p)
mean(p) - 2*sd(p)
sep<-sd(p)*sqrt(1+1/n)
sep
mean(p) - 2*sep
mtxars$wt
mtcars$wt
mean(mtcars$wt)
p<-predict(fit, x=mean(mtcars$wt)
)
p
summary(p)
p<-predict(fit, x=3000
)
summary(p)
p<-predict(fit, x=1000)
summary(p)
p<-predict(fit, x=mean(mtcars$wt), se.fit -TRUE
)
p<-predict(fit, x=mean(mtcars$wt), se.fit =TRUE)
summary(p)
p
newdata<-data.frame(x=mean(x)
)
newdata
fit<-lm(y~x);
predict(fit, x=mean(mtcars$wt), interval="predict")
predict(fit, x=newdata, interval="predict")
predict(fit, x=3000, interval="predict")
x
predict(fit, x=3, interval="predict")
y<-mtcars$mpg
x<-mtcars$wt
n<-length(y)
df<-n-2
x
fit<-lm(y~x);
newdata<-data.frame(x=mean(x))
newdata
predict(fit, x=newdata, interval="predict")
library(swirl)
ls
rm(list=ls())
swirl()
rep(1,nrow(galton))
ones<-rep(1,nrow(galton))
lm(child~ones+parent-1,galton)
lm(child~parent,galton)
lm(child~1,galton)
head(trees)
fit<-lm(Volume~Girth + Height + Costant -1, trees)
fit<-lm(Volume~Girth + Height + Constant -1, trees)
trees2<-eliminate("Girth",trees)
head(trees2)
fit2<-lm(Height + Constant -1, trees)
fit2<-lm(Height + Constant -1, trees2)
fit2<-lm(Height ~ Constant -1, trees2)
fit2<-lm(Volume~Height + Constant -1, trees2)
lapply(list(fit,fit2),coef)
all<-lm(Fertility~.)
all<-lm(Fertility~., swiss)
summary(all)
lm(Fertiltiy~agriculture)
lm(Fertiltiy~agriculture, swiss)
lm(Fertility~agriculture, swiss)
lm(Fertility~Agriculture, swiss)
summary(lm(Fertility~Agriculture, swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec<-swiss$Examination + swiss$Catholic
efit<-lm(Fertility`.+ec, swiss)
)
efit<-lm(Fertility~.+ec, swiss)
all - efit
all$coef - efit$coef
all$coefficients - efit$coefficients
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
InsectSprays[,2]
sumary(InsectSprays[,2])
summary(InsectSprays[,2])
sapply(InsectSprays, FUN=class)
sapply(InsectSprays, class)
fit<-lm(count~spray,InsectSprays)
summary(fit$coef)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray -1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray, "C")
fit2<-lm(count~spray2 ,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]- fit$coef[3])/1.6011
dim(hunger)
948
str(hunger)
names(hunger)
fit<-lm(Numeric~Year, hunger)
summary(fit)$coef
fit<-lm(Numeric~Year, hunger[hunger$Sex=="Female"])
fit<-lm(Numeric[hunger$Sex=="Female"]~Year, hunger)
fit<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmf<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmM<-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"], hunger)
lmBoth<-lm(Numeric~Year + Sex, hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year + Sex + Sex*Year, hunger)
summary(lmInter)
ls()
rm(list=ls())
##Ok, I going to do my best to elucidate this very confusing aspect of Statistics... Here it goes:
data(mtcars)
y<-mtcars$mpg
x<-mtcars$wt
n<-length(y)
df<-n-2
fit<-lm(y~x);
summary(fit)$coefficients
predict(fit, newdata = data.frame(x = mean(x)), interval = 'prediction', level = 0.95)
37.28-mean(c)*5.34
37.28-mean(x)*5.34
predict(fit, newdata = data.frame(x = 3, interval = 'prediction', level = 0.95)
predict(fit, newdata = data.frame(x = 3), interval = 'prediction', level = 0.95)
predict(fit, newdata = data.frame(x = mean(x)), interval = "confidence", level = 0.95)
confint(fit)
confint(fit, "wt")
summary(fit)$coef
confint(fit)
confint(fit, "x")
fitS<-lm(y~x/2);
fitS<-lm(mpg~wt/2, data=mtcars);
fitS<-lm(mtcars$mpg~mtcars$wt/2, data=mtcars);
xS<mtcars$wt/2
xS<-mtcars$wt/2
fitS<-lm(y~xS);
confint(fit, "xS")
xS
confint(fitS, "xS")
fit
summary(fit)
fit1<-lm(y~1)
summary(fit1)
str(fit)
resFit<-3.046
resFit1<-6.027
resFit/resFit1
anova(fit)
anova(fit1)
deviance(fit)
deviance(fit1)
deviance(fit)/deviance(fit1)
resFit<-deviance(fit)
resFit1<-deviance(fit1)
resFit/resFit1
resFit/resFit1
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
slidify()
library(slidify)
library(slidify)
slidify()
slidify(index.Rmd)
slidify("index.Rmd")
getwd()
setwd("./mydeck")
getwd()
slidify("index.Rmd")
browseURL("index.html")
set.seed(112358)
tdist<-rt(30,30)
tsd<-sd(tdist)
tmn<-mean(tdist)
#plot histogram
h<-hist(tdist, col = 'gray', border = 'white', main="T-distribution with Normal Overlay", xlab="Standard Deviation")
#caluclate normal distribution based on T distribution
##xfit is a horizontal line with 50 points, running the range of the histogram
xfit<-seq(min(tdist),max(tdist),length=50)
# apply normal density function to xfit
# with a mean and standard deviation of the random T distribution
yfit<-dnorm(xfit,mean=tmn,sd=tsd)
## diff(h$mids[1:2]) is the distance between the midpoints
# of two bars of the histogram
yfit <- yfit*diff(h$mids[1:2])*length(tdist)
# plot normal curve
lines(xfit, yfit, col="red", lwd=2)
set.seed(112358)
df<-30
no<-30
tdist<-rt(df,no)
tsd<-sd(tdist)
tmn<-mean(tdist)
#plot histogram
h<-hist(tdist, col = 'gray', border = 'white', main="T-distribution with Normal Overlay", xlab="Standard Deviation")
#caluclate normal distribution based on T distribution
##xfit is a horizontal line with 50 points, running the range of the histogram
xfit<-seq(min(tdist),max(tdist),length=50)
# apply normal density function to xfit
# with a mean and standard deviation of the random T distribution
yfit<-dnorm(xfit,mean=tmn,sd=tsd)
## diff(h$mids[1:2]) is the distance between the midpoints
# of two bars of the histogram
yfit <- yfit*diff(h$mids[1:2])*length(tdist)
# plot normal curve
lines(xfit, yfit, col="red", lwd=2)
publish_github(rlstober, mydeck)
publish_github('rlstober', 'mydeck')
